saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is C:\Users\DPatton\gits2\kernelkernel\..\condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/../condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/../condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/condensed_model_save, but does not seem to exist
saved_filename is model_save, but does not seem to exist
optimizedict for None:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'self', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 5)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 7, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for None:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'self', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 5)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 7, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/../condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/condensed_model_save, but does not seem to exist
optimizedict for None:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.315, 0.3  ]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'self', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 5)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 7, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for None:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.315, 0.3  ]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'self', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 5)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 7, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/../condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/condensed_model_save, but does not seem to exist
optimizedict for None:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.315, 0.3  ]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5  , 0.525]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'cross_mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'self', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 5)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 7, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for None:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.315, 0.3  ]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5  , 0.525]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'cross_mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'self', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 5)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 7, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node98693450-5/condensed_model_save, but does not seem to exist
optimizedict for node98693450-5:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 3, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 580, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1158, in __call__
    result = self.f(da, db, *args, **kwargs)
MemoryError: Unable to allocate array with shape (32, 32, 32, 32, 33, 32) and data type float64
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node98693450-4/condensed_model_save, but does not seem to exist
optimizedict for node98693450-4:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 3, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 580, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1158, in __call__
    result = self.f(da, db, *args, **kwargs)
MemoryError: Unable to allocate array with shape (32, 32, 32, 32, 33, 32) and data type float64
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node98693450-6/condensed_model_save, but does not seem to exist
optimizedict for node98693450-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 3, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 580, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1158, in __call__
    result = self.f(da, db, *args, **kwargs)
MemoryError: Unable to allocate array with shape (32, 32, 32, 32, 33, 32) and data type float64
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node98693450-3/condensed_model_save, but does not seem to exist
optimizedict for node98693450-3:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 3, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 580, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1158, in __call__
    result = self.f(da, db, *args, **kwargs)
MemoryError: Unable to allocate array with shape (32, 32, 32, 32, 33, 32) and data type float64
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-5/condensed_model_save, but does not seem to exist
optimizedict for node8107054-5:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-3/condensed_model_save, but does not seem to exist
optimizedict for node8107054-3:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-8/condensed_model_save, but does not seem to exist
optimizedict for node8107054-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-7/condensed_model_save, but does not seem to exist
optimizedict for node8107054-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-4/condensed_model_save, but does not seem to exist
optimizedict for node8107054-4:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-6/condensed_model_save, but does not seem to exist
optimizedict for node8107054-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-70/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-70/condensed_model_save, but does not seem to exist
optimizedict for node8107054-70:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node8107054-70:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-43/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-43/condensed_model_save, but does not seem to exist
optimizedict for node8107054-43:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node8107054-43:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-59/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-59/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-59/condensed_model_save, but does not seem to exist
optimizedict for node8107054-59:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node8107054-59:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node8107054-59:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-51/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node8107054-51/condensed_model_save, but does not seem to exist
optimizedict for node8107054-51:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node8107054-51:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node74005936-5:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node74005936-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node74005936-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node74005936-9/condensed_model_save, but does not seem to exist
optimizedict for node74005936-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1176, in __call__
    np.copyto(result, 0, casting='unsafe', where=m)
  File "<__array_function__ internals>", line 6, in copyto
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1176, in __call__
    np.copyto(result, 0, casting='unsafe', where=m)
  File "<__array_function__ internals>", line 6, in copyto
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1158, in __call__
    result = self.f(da, db, *args, **kwargs)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-12/condensed_model_save, but does not seem to exist
optimizedict for node67644405-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-14/condensed_model_save, but does not seem to exist
optimizedict for node67644405-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-8/condensed_model_save, but does not seem to exist
optimizedict for node67644405-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-7/condensed_model_save, but does not seem to exist
optimizedict for node67644405-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-10/condensed_model_save, but does not seem to exist
optimizedict for node67644405-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-4/condensed_model_save, but does not seem to exist
optimizedict for node67644405-4:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-9/condensed_model_save, but does not seem to exist
optimizedict for node67644405-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-5/condensed_model_save, but does not seem to exist
optimizedict for node67644405-5:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-6/condensed_model_save, but does not seem to exist
optimizedict for node67644405-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-3/condensed_model_save, but does not seem to exist
optimizedict for node67644405-3:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node67644405-11/condensed_model_save, but does not seem to exist
optimizedict for node67644405-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-3:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-5/condensed_model_save, but does not seem to exist
optimizedict for node87530723-5:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-7/condensed_model_save, but does not seem to exist
optimizedict for node87530723-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-4/condensed_model_save, but does not seem to exist
optimizedict for node87530723-4:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-8/condensed_model_save, but does not seem to exist
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-82:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-82:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-78/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-78/condensed_model_save, but does not seem to exist
optimizedict for node87530723-78:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-78:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-9/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-9/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-9/condensed_model_save, but does not seem to exist
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node87530723-45:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-45:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-52:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-52:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-52:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-90:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-90:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-61/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-61/condensed_model_save, but does not seem to exist
optimizedict for node87530723-61:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-61:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-75:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-75:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-75:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-56/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-56/condensed_model_save, but does not seem to exist
optimizedict for node87530723-56:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-56:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-10/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-10/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-10/condensed_model_save, but does not seem to exist
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-108/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-108/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-108/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-108/condensed_model_save, but does not seem to exist
optimizedict for node87530723-108:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-108:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-108:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-108:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-11/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-11/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-11/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-11/condensed_model_save, but does not seem to exist
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-12/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-12/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-12/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-12/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-12/condensed_model_save, but does not seem to exist
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-6/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-6/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-6/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-6/condensed_model_save, but does not seem to exist
optimizedict for node87530723-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-8/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-8/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-8/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-8/condensed_model_save, but does not seem to exist
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-68:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-68:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-68:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-97/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-97/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-97/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-97/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-97/condensed_model_save, but does not seem to exist
optimizedict for node87530723-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-103/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-103/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-103/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-103/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-103/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-103/condensed_model_save, but does not seem to exist
optimizedict for node87530723-103:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-103:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-103:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-103:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-103:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-103:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-116:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-116:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-116:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-116:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-116:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-116:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-116:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node87530723-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-15/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-15/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-15/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-15/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-15/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-15/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-15/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-15/condensed_model_save, but does not seem to exist
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-17/condensed_model_save, but does not seem to exist
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-17:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-76:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-76:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-76:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-76:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-12:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.31]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-122:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-95:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-95:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-95:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-95:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-95:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-95:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-119/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-119/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-119/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-119/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-119/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-119/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-119/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-119/condensed_model_save, but does not seem to exist
optimizedict for node87530723-119:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-119:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-119:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-119:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-119:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-119:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-119:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-119:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-127:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-127:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-127:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-127:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-127:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-127:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-127:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-127:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 606, in _minimize_neldermead
    fxe = func(xe)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-130:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1.05, 1.  ]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-147:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.09618963, 0.18472505]), 'x_bandscale': array([1.02730274, 1.29932908, 0.88263733, 0.81008627]), 'outer_x_bw': array([4.66119068]), 'outer_y_bw': array([3.7382739]), 'Ndiff_depth_bw': array([0.44261673, 0.51242323]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-150:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-16/condensed_model_save, but does not seem to exist
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-16:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-166:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-18:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-125:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-175:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-183/condensed_model_save, but does not seem to exist
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-183:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-19:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-20:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-21:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.48084297e-06, 1.70805239e-06]), 'x_bandscale': array([1.21102011, 2.23404629, 2.17488263, 0.56557811]), 'outer_x_bw': array([0.04340177]), 'outer_y_bw': array([0.64683158]), 'Ndiff_depth_bw': array([0.33226778]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-13:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28425086, 0.30920848]), 'x_bandscale': array([0.95370231, 0.77397971, 0.69521259, 0.92115448]), 'outer_x_bw': array([3.77154861]), 'outer_y_bw': array([2.48306758]), 'Ndiff_depth_bw': array([0.59738249, 0.55487226]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-14:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.21412151, 0.26366361]), 'x_bandscale': array([1.01122396, 0.60199721, 0.83802682, 0.91997901]), 'outer_x_bw': array([4.25966844]), 'outer_y_bw': array([2.72717441]), 'Ndiff_depth_bw': array([0.65736529, 0.57229619]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
saved_filename is /home/douglas/gits/kernelkernel/cluster_test/node87530723-195/condensed_model_save, but does not seem to exist
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-195:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([2.7]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-15:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node87530723-209:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.19079721]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-8:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.31965958, 0.12528355]), 'x_bandscale': array([1.0940579 , 1.08249569]), 'outer_x_bw': array([0.70114424]), 'outer_y_bw': array([6.68679417]), 'Ndiff_depth_bw': array([0.43158837, 0.5132781 ]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-3:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.33891069, 0.254709  ]), 'x_bandscale': array([1.22417049, 1.76782903]), 'outer_x_bw': array([-1.3107268]), 'outer_y_bw': array([3.70881534]), 'Ndiff_depth_bw': array([0.38245037, 0.51316266]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-6:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([-1.40956681e-06, -1.31671432e-05]), 'x_bandscale': array([1.80988963, 2.77666364, 2.6511351 , 2.68854452]), 'outer_x_bw': array([-1.03615452]), 'outer_y_bw': array([1.50184841]), 'Ndiff_depth_bw': array([-0.38098384]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-4:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.3, 0.3]), 'x_bandscale': array([1., 1., 1., 1.]), 'outer_x_bw': array([2.835]), 'outer_y_bw': array([2.2]), 'Ndiff_depth_bw': array([0.5, 0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-5:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.31965958, 0.12528355]), 'x_bandscale': array([1.0940579 , 1.08249569]), 'outer_x_bw': array([0.70114424]), 'outer_y_bw': array([6.68679417]), 'Ndiff_depth_bw': array([0.43158837, 0.5132781 ]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-7:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.40690963, 0.32438616]), 'x_bandscale': array([1.17573935, 1.34430107]), 'outer_x_bw': array([1.70641047]), 'outer_y_bw': array([1.1582711]), 'Ndiff_depth_bw': array([0.51641886, 0.53006146]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node66220129-70:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-70:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.15592441e-05, 1.11195658e-05]), 'x_bandscale': array([1.449573  , 1.32976461, 1.02845799, 0.92460295]), 'outer_x_bw': array([0.26313743]), 'outer_y_bw': array([0.06823371]), 'Ndiff_depth_bw': array([0.50719279]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-9:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.23222836, 0.2777618 ]), 'x_bandscale': array([1.04251524, 0.59914513, 1.0022975 , 0.91207745]), 'outer_x_bw': array([3.62731257]), 'outer_y_bw': array([2.48500345]), 'Ndiff_depth_bw': array([0.60666473, 0.57148161]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-65:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.33891069, 0.254709  ]), 'x_bandscale': array([1.22417049, 1.76782903]), 'outer_x_bw': array([-1.3107268]), 'outer_y_bw': array([3.70881534]), 'Ndiff_depth_bw': array([0.38245037, 0.51316266]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-65:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.33891069, 0.254709  ]), 'x_bandscale': array([1.22417049, 1.76782903]), 'outer_x_bw': array([-1.3107268]), 'outer_y_bw': array([3.70881534]), 'Ndiff_depth_bw': array([0.38245037, 0.51316266]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-57:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-57:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([8.40070286e-06, 6.31120503e-06]), 'x_bandscale': array([1.55507533, 2.07147339]), 'outer_x_bw': array([0.12589499]), 'outer_y_bw': array([0.43219457]), 'Ndiff_depth_bw': array([0.29349315]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-71:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([7.18354288e-06, 6.69821885e-06]), 'x_bandscale': array([3.22276312, 2.71253112, 1.34862395, 0.99245926]), 'outer_x_bw': array([-0.22596136]), 'outer_y_bw': array([0.12078107]), 'Ndiff_depth_bw': array([0.27367072]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-71:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([7.18354288e-06, 6.69821885e-06]), 'x_bandscale': array([3.22276312, 2.71253112, 1.34862395, 0.99245926]), 'outer_x_bw': array([-0.22596136]), 'outer_y_bw': array([0.12078107]), 'Ndiff_depth_bw': array([0.27367072]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-71:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([7.18354288e-06, 6.69821885e-06]), 'x_bandscale': array([3.22276312, 2.71253112, 1.34862395, 0.99245926]), 'outer_x_bw': array([-0.22596136]), 'outer_y_bw': array([0.12078107]), 'Ndiff_depth_bw': array([0.27367072]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node66220129-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-85:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1., 1.]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.315]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.38228423, 0.27431135]), 'x_bandscale': array([1.18311353, 1.15762039, 1.25269037, 1.03621578]), 'outer_x_bw': array([2.13056567]), 'outer_y_bw': array([1.25257041]), 'Ndiff_depth_bw': array([0.43421908, 0.48900179]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.38228423, 0.27431135]), 'x_bandscale': array([1.18311353, 1.15762039, 1.25269037, 1.03621578]), 'outer_x_bw': array([2.13056567]), 'outer_y_bw': array([1.25257041]), 'Ndiff_depth_bw': array([0.43421908, 0.48900179]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-10:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.38228423, 0.27431135]), 'x_bandscale': array([1.18311353, 1.15762039, 1.25269037, 1.03621578]), 'outer_x_bw': array([2.13056567]), 'outer_y_bw': array([1.25257041]), 'Ndiff_depth_bw': array([0.43421908, 0.48900179]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node66220129-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-11:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-64:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.31965958, 0.12528355]), 'x_bandscale': array([1.0940579 , 1.08249569]), 'outer_x_bw': array([0.70114424]), 'outer_y_bw': array([6.68679417]), 'Ndiff_depth_bw': array([0.43158837, 0.5132781 ]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-64:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.31965958, 0.12528355]), 'x_bandscale': array([1.0940579 , 1.08249569]), 'outer_x_bw': array([0.70114424]), 'outer_y_bw': array([6.68679417]), 'Ndiff_depth_bw': array([0.43158837, 0.5132781 ]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-64:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.31965958, 0.12528355]), 'x_bandscale': array([1.0940579 , 1.08249569]), 'outer_x_bw': array([0.70114424]), 'outer_y_bw': array([6.68679417]), 'Ndiff_depth_bw': array([0.43158837, 0.5132781 ]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-73:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-73:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-73:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-73:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.27172696, 0.27031384]), 'x_bandscale': array([0.71878332, 1.25484026]), 'outer_x_bw': array([2.27959635]), 'outer_y_bw': array([2.87595375]), 'Ndiff_depth_bw': array([0.5392117 , 0.52997498]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-88:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([-1.40956681e-06, -1.31671432e-05]), 'x_bandscale': array([1.80988963, 2.77666364, 2.6511351 , 2.68854452]), 'outer_x_bw': array([-1.03615452]), 'outer_y_bw': array([1.50184841]), 'Ndiff_depth_bw': array([-0.38098384]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-88:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([-1.40956681e-06, -1.31671432e-05]), 'x_bandscale': array([1.80988963, 2.77666364, 2.6511351 , 2.68854452]), 'outer_x_bw': array([-1.03615452]), 'outer_y_bw': array([1.50184841]), 'Ndiff_depth_bw': array([-0.38098384]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-88:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([-1.40956681e-06, -1.31671432e-05]), 'x_bandscale': array([1.80988963, 2.77666364, 2.6511351 , 2.68854452]), 'outer_x_bw': array([-1.03615452]), 'outer_y_bw': array([1.50184841]), 'Ndiff_depth_bw': array([-0.38098384]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-88:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([-1.40956681e-06, -1.31671432e-05]), 'x_bandscale': array([1.80988963, 2.77666364, 2.6511351 , 2.68854452]), 'outer_x_bw': array([-1.03615452]), 'outer_y_bw': array([1.50184841]), 'Ndiff_depth_bw': array([-0.38098384]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-88:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([-1.40956681e-06, -1.31671432e-05]), 'x_bandscale': array([1.80988963, 2.77666364, 2.6511351 , 2.68854452]), 'outer_x_bw': array([-1.03615452]), 'outer_y_bw': array([1.50184841]), 'Ndiff_depth_bw': array([-0.38098384]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-41:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.22502523, 0.19457449]), 'x_bandscale': array([1.78356468, 0.94283375]), 'outer_x_bw': array([0.75967035]), 'outer_y_bw': array([4.75552801]), 'Ndiff_depth_bw': array([0.29789955, 0.57869054]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-41:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.22502523, 0.19457449]), 'x_bandscale': array([1.78356468, 0.94283375]), 'outer_x_bw': array([0.75967035]), 'outer_y_bw': array([4.75552801]), 'Ndiff_depth_bw': array([0.29789955, 0.57869054]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node66220129-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.22502523, 0.19457449]), 'x_bandscale': array([1.78356468, 0.94283375]), 'outer_x_bw': array([0.75967035]), 'outer_y_bw': array([4.75552801]), 'Ndiff_depth_bw': array([0.29789955, 0.57869054]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.22502523, 0.19457449]), 'x_bandscale': array([1.78356468, 0.94283375]), 'outer_x_bw': array([0.75967035]), 'outer_y_bw': array([4.75552801]), 'Ndiff_depth_bw': array([0.29789955, 0.57869054]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.22502523, 0.19457449]), 'x_bandscale': array([1.78356468, 0.94283375]), 'outer_x_bw': array([0.75967035]), 'outer_y_bw': array([4.75552801]), 'Ndiff_depth_bw': array([0.29789955, 0.57869054]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.22502523, 0.19457449]), 'x_bandscale': array([1.78356468, 0.94283375]), 'outer_x_bw': array([0.75967035]), 'outer_y_bw': array([4.75552801]), 'Ndiff_depth_bw': array([0.29789955, 0.57869054]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.22502523, 0.19457449]), 'x_bandscale': array([1.78356468, 0.94283375]), 'outer_x_bw': array([0.75967035]), 'outer_y_bw': array([4.75552801]), 'Ndiff_depth_bw': array([0.29789955, 0.57869054]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-97:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.22502523, 0.19457449]), 'x_bandscale': array([1.78356468, 0.94283375]), 'outer_x_bw': array([0.75967035]), 'outer_y_bw': array([4.75552801]), 'Ndiff_depth_bw': array([0.29789955, 0.57869054]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('exp', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-82:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.33891069, 0.254709  ]), 'x_bandscale': array([1.22417049, 1.76782903]), 'outer_x_bw': array([-1.3107268]), 'outer_y_bw': array([3.70881534]), 'Ndiff_depth_bw': array([0.38245037, 0.51316266]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-82:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.33891069, 0.254709  ]), 'x_bandscale': array([1.22417049, 1.76782903]), 'outer_x_bw': array([-1.3107268]), 'outer_y_bw': array([3.70881534]), 'Ndiff_depth_bw': array([0.38245037, 0.51316266]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'product', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-58:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05, 1.  , 1.  ]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-58:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05, 1.  , 1.  ]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-58:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([1.e-05, 1.e-05]), 'x_bandscale': array([1.  , 1.05, 1.  , 1.  ]), 'outer_x_bw': array([0.3]), 'outer_y_bw': array([0.3]), 'Ndiff_depth_bw': array([0.5]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'batch_crossval', 'Ndiff_type': 'recursive', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 33, 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'linear', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-100:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([9.61588638e-06, 1.10422527e-05]), 'x_bandscale': array([1.26788285, 1.46307402]), 'outer_x_bw': array([0.16059407]), 'outer_y_bw': array([0.29847676]), 'Ndiff_depth_bw': array([0.44125333]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'mse', 'Ndiff_type': 'recursive', 'param_count': 2, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'none', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW-rbf2', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 2, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
error in mycluster could not findmodel_save
error in mycluster could not findfinal_model_save
error in mycluster could not findmodel_save
error in mycluster could not findfinal_model_save
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 830, in MY_KDEpredictMSE
    assert maskcount==0,print(f'{maskcount} masked values found in all_y_err')
AssertionError: None
optimizedict for node66220129-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.30033707]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.30033707]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.30033707]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.30033707]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.30033707]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.30033707]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.30033707]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
optimizedict for node66220129-112:{'opt_settings_dict': {'method': 'Nelder-Mead', 'options': {'xatol': 0.5, 'fatol': 1, 'adaptive': True}, 'help_start': 1, 'partial_match': 1}, 'hyper_param_dict': {'Ndiff_exponent': array([0.28011103, 0.2922635 ]), 'x_bandscale': array([0.98030804, 0.9744701 , 0.98689214, 0.99337118]), 'outer_x_bw': array([2.97871557]), 'outer_y_bw': array([2.30033707]), 'Ndiff_depth_bw': array([0.54626304, 0.50338794]), 'y_bandscale': array([1.])}, 'modeldict': {'loss_function': 'crossmse2', 'Ndiff_type': 'product', 'param_count': 4, 'Ndiff_start': 1, 'max_bw_Ndiff': 2, 'normalize_Ndiffwtsum': 'own_n', 'NWnorm': 'across', 'xkern_grid': 'no', 'ykern_grid': 'no', 'outer_kern': 'gaussian', 'Ndiff_bw_kern': 'rbfkern', 'outer_x_bw_form': 'one_for_all', 'regression_model': 'NW', 'product_kern_norm': 'none', 'hyper_param_form_dict': {'Ndiff_exponent': 'free', 'x_bandscale': 'non-neg', 'Ndiff_depth_bw': 'non-neg', 'outer_x_bw': 'non-neg', 'outer_y_bw': 'non-neg', 'y_bandscale': 'fixed'}, 'ykerngrid_form': ('even', 4)}, 'datagen_dict': {'validate_batchcount': 10, 'batch_n': 32, 'batchcount': 10, 'param_count': 4, 'seed': 1, 'ftype': 'quadratic', 'evar': 1, 'source': 'monte'}}
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1160, in __call__
    m = ~umath.isfinite(result)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1160, in __call__
    m = ~umath.isfinite(result)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1160, in __call__
    m = ~umath.isfinite(result)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1160, in __call__
    m = ~umath.isfinite(result)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1160, in __call__
    m = ~umath.isfinite(result)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1160, in __call__
    m = ~umath.isfinite(result)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1160, in __call__
    m = ~umath.isfinite(result)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 585, in _minimize_neldermead
    fsim[k] = func(sim[k])
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1160, in __call__
    m = ~umath.isfinite(result)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 6717, in power
    result = np.where(m, fa, umath.power(fa, fb)).view(basetype)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 6717, in power
    result = np.where(m, fa, umath.power(fa, fb)).view(basetype)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 186, in BWmaker
    this_depth_bw=self.Ndiff_product(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 120, in Ndiff_product
    self.do_bw_kern(Ndiff_bw_kern,masked_data,Ndiff_bw)*deeper_bw,normalize),Ndiff_exp)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
error in mycluster
Traceback (most recent call last):
  File "/home/douglas/gits/kernelkernel/mycluster.py", line 581, in runnode
    my_optimizedict,my_datagen_dict,force_start_params=0)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 930, in run_model_as_node
    self.do_monte_opt(optimizedict,datagen_dict,force_start_params=force_start_params)
  File "/home/douglas/gits/kernelkernel/kernelcompare.py", line 45, in do_monte_opt
    mk.optimize_free_params(datagen_obj,optimizedict,savedir=self.kc_savedirectory,myname=self.name)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 962, in __init__
    self.minimize_obj=minimize(self.MY_KDEpredictMSE, free_params, args=args_tuple, method=method, options=opt_method_options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/_minimize.py", line 588, in minimize
    return _minimize_neldermead(fun, x0, args, callback, **options)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 601, in _minimize_neldermead
    fxr = func(xr)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/scipy/optimize/optimize.py", line 326, in function_wrapper
    return function(*(wrapper_args + args))
  File "/home/douglas/gits/kernelkernel/mykern.py", line 811, in MY_KDEpredictMSE
    result_tup=self.MPwrapperKDEpredict(arglistlist[i])
  File "/home/douglas/gits/kernelkernel/mykern.py", line 861, in MPwrapperKDEpredict
    return self.MY_KDEpredict(yin, yout, xin, xpr, modeldict, fixed_or_free_paramdict)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 638, in MY_KDEpredict
    ybw = self.BWmaker(max_bw_Ndiff, fixed_or_free_paramdict, diffdict['ydiffdict'],modeldict,'y')
  File "/home/douglas/gits/kernelkernel/mykern.py", line 190, in BWmaker
    this_depth_bw=self.Ndiff_recursive(this_depth_masked_data,deeper_depth_bw,this_depth_exponent,this_depth_bw_param,Ndiff_bw_kern,normalize)
  File "/home/douglas/gits/kernelkernel/mykern.py", line 115, in Ndiff_recursive
    self.do_bw_kern(Ndiff_bw_kern, masked_data,deeper_bw),normalize),Ndiff_exp                   )
  File "/home/douglas/gits/kernelkernel/mykern.py", line 215, in do_bw_kern
    return self.gkernh(maskeddata, Ndiff_depth_bw_param)#parameters already collapsed, so this will be rbf
  File "/home/douglas/gits/kernelkernel/mykern.py", line 220, in gkernh
    numerator=np.ma.exp(-np.ma.power(x/(h*2), 2))
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 4129, in __truediv__
    return true_divide(self, other)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 1166, in __call__
    m |= domain(da, db)
  File "/home/douglas/anaconda3/lib/python3.7/site-packages/numpy/ma/core.py", line 853, in __call__
    return umath.absolute(a) * self.tolerance >= umath.absolute(b)
KeyboardInterrupt
